# Load custom default resource bundles.
#
# Bamboo has two ways of loading i18n properties, via webworks DefaultTextProvider and via DefaultI18nBean
# This configuration only applies to the DefaultTextProvider, so you will also update the manual file includes in the DefaultI18nBean.
#
struts.custom.i18n.resources=com.atlassian.bamboo.ww2.BambooActionSupport,help-paths,help-internal
struts.i18n.encoding=UTF-8
#otherwise it will be taken from the request
struts.locale=en_US
#
# Obtain the action page configuration from ...
#
struts.configuration.xml=actions

#
# Use these macros of common display fragments
#
velocimacro.library=macros/macros.vm
velocimacro.permissions.allow.inline = true
velocimacro.permissions.allow.inline.to.replace.global = true
velocimacro.permissions.allow.inline.local.scope = true
class.resource.loader.cache=false
velocimacro.library.autoreload=true
class.resource.loader.modificationCheckInterval=0

### when set to true, Struts will act much more friendly for developers. This
### includes:
### - struts.i18n.reload = true
### - struts.configuration.xml.reload = true
### - raising various debug or ignorable problems to errors
###   For example: normally a request to foo.action?someUnknownField=true should
###                be ignored (given that any value can come from the web and it
###                should not be trusted). However, during development, it may be
###                useful to know when these errors are happening and be told of
###                them right away.
struts.devMode = false

#
# Disable veocity log files
#
runtime.log.logsystem.class = org.apache.velocity.runtime.log.NullLogSystem

# log bad references inside velocity templates
#runtime.log.invalid.references = true

# Use a custom log to distinguish output
#runtime.log = webwork-velocity.log
#resource.manager.logwhenfound = false

# Set this to your own source directory during development.
# This allows you to edit the pages while the server is running without losing
# the changes when you re-deploy the application.
file.resource.loader.path = /

#struts.injection.objectcreator=com.atlassian.bamboo.container.SpringOldWebWorkObjectCreator

# uses javax.servlet.context.tempdir by default
struts.multipart.saveDir=

### Used by the DefaultActionMapper
### You may provide a comma separated list, e.g. struts.action.extension=action,jnlp,do
### The blank extension allows you to match directory listings as well as pure action names
### without interfering with static resources, which can be specified as an empty string
### prior to a comma e.g. struts.action.extension=, or struts.action.extension=x,y,z,,
struts.action.extension=action

### Set this to false if you wish to disable implicit dynamic method invocation
### via the URL request. This includes URLs like foo!bar.action, as well as params
### like method:bar (but not action:foo).
### An alternative to implicit dynamic method invocation is to use wildcard
### mappings, such as <action name="*/*" method="{2}" class="actions.{1}">
struts.enable.DynamicMethodInvocation = true

#struts.devMode = true
struts.ui.theme = aui
#this is the Spring bean id.
struts.freemarker.manager.classname=templateRenderer
struts.tag.altSyntax=true
struts.url.includeParams=none
struts.objectFactory = springObjectFactoryProxy

# when chaining actions (e.g. showing validation errors), copy the reasons for chaining between actions
# this mimics WebWork 2 behaviour (and Struts <2.2)
struts.xwork.chaining.copyErrors=true
struts.xwork.chaining.copyFieldErrors=true
struts.xwork.chaining.copyMessages=true